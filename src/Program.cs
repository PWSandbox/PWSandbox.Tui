// This file is a part of PWSandbox.Tui ( https://github.com/PWSandbox/PWSandbox.Tui )
// PWSandbox.Tui is licensed under the MIT (Expat) License:

/* MIT License
 *
 * Copyright (c) 2025 yarb00
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

using System;
using System.Diagnostics;
using static System.Reflection.Assembly;

namespace PWSandbox.Tui;

public static class Program
{
	public static readonly Version? AppVersion = GetExecutingAssembly().GetName().Version;

	public static void Main(string[] args)
	{
		if (!Debugger.IsAttached) AppDomain.CurrentDomain.UnhandledException += HandleUnhandledException;

		if (args.Length == 0) Menu.Start();
		else if (args.Length == 2 && (args[0] == "--map-file" || args[0] == "-m"))
		{
			(PlayMenu? playMenu, string? errorText) = Menu.GetLoadedPlayMenu(args[1]);

			Console.WriteLine(errorText);
			playMenu?.Start();
		}
		else Console.WriteLine($"PWSandbox.Tui (v{(AppVersion is not null ? ' ' + AppVersion.ToString(3) : "")}: Wrong arguments!");
	}

	#region Handling of unhandled exceptions

	private static void HandleUnhandledException(object sender, UnhandledExceptionEventArgs e)
		=> HandleUnhandledException((Exception)e.ExceptionObject);

	private static void HandleUnhandledException(Exception e)
	{
		const string panicText = """
			===== ouch x_x =====
			An unhandled exception occured! An unhandled exception is a serious error that should not normally happen.
			Unfortunaly, because of that, PWSandbox.Tui had to close.
			Please report this issue to the PWSandbox.Tui GitHub.

			Link (copy and paste into your browser):
			{issueCreateLink}

			===== Details: =====
			{e}
			""";

		string
			issueTitle = $"Unhandled exception: \"{e.GetType().Name}\"",
			issueBody = $"""
				***Auto-generated by PWSandbox.Tui.***

				## Environment
				**PWSandbox.Tui version**: `{AppVersion?.ToString(3) ?? "[! REPLACE WITH YOUR PWSANDBOX.TUI VERSION !]"}`
				**OS**: `{System.Runtime.InteropServices.RuntimeInformation.OSDescription}`

				## Exception info
				**Type**: `{e.GetType().FullName}`
				**Message**: `{e.Message}`

				### Stack trace
				{e.StackTrace?.Replace("   ", "    ") ?? "[! COPY DETAILS SECTION FROM CONSOLE HERE !]"}
				""",
			issueLink = $"https://github.com/PWSandbox/PWSandbox.Tui/issues/new?title={Linkify(issueTitle)}&body={Linkify(issueBody)}";

		Console.WriteLine(panicText
			.Replace("{issueCreateLink}", issueLink)
			.Replace("{e}", e.ToString())
		);
	}

	private static string Linkify(string text) => text
		.Replace(' ', '+')
		.Replace("#", "%23")
		.Replace("\"", "%22")
		.Replace("/", "%2F")
		.Replace("&", "%26")
		.ReplaceLineEndings("%0A");

	#endregion
}
